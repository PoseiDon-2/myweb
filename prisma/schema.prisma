generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model budget {
  id                String @id
  donationRequestId String
  item              String
  amount            Float

  @@index([donationRequestId], map: "Budget_donationRequestId_fkey")
}

model creator {
  id              String   @id
  userId          Int      @unique(map: "Creator_userId_key")
  firstName       String
  lastName        String
  email           String   @unique(map: "Creator_email_key")
  phone           String
  schoolName      String
  schoolDistrict  String
  position        String
  schoolAddress   String   @db.Text
  licenseFileUrl  String?
  positionFileUrl String?
  isVerified      Boolean  @default(false)
  termsAccepted   Boolean  @default(false)
  privacyAccepted Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
}

model donation {
  id              String   @id
  requestId       String
  amount          Float
  name            String
  email           String
  phone           String
  message         String?
  taxReceipt      Boolean  @default(false)
  isAnonymous     Boolean  @default(false)
  slipUrl         String?
  createdAt       DateTime @default(now())
  referenceNumber String?  @unique(map: "Donation_referenceNumber_key")

  @@index([requestId], map: "Donation_requestId_fkey")
}

model donationrequest {
  id            String    @id
  schoolName    String
  projectTitle  String
  description   String
  category      String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  image         String?
  contactName   String
  contactPhone  String
  contactEmail  String
  walletAddress String
  creatorId     String
  createdAt     DateTime  @default(now())

  @@index([creatorId], map: "DonationRequest_creatorId_fkey")
}

model outcome {
  id                String @id
  donationRequestId String
  title             String
  description       String

  @@index([donationRequestId], map: "Outcome_donationRequestId_fkey")
}

model tracking {
  id         String   @id
  type       String
  donationId String?
  creatorId  String?
  status     String
  details    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([creatorId], map: "Tracking_creatorId_fkey")
  @@index([donationId], map: "Tracking_donationId_fkey")
}

model update {
  id                String   @id
  donationRequestId String
  title             String
  date              DateTime
  description       String

  @@index([donationRequestId], map: "Update_donationRequestId_fkey")
}

model user {
  id                Int       @id @default(autoincrement())
  fname             String
  lname             String
  email             String    @unique(map: "User_email_key")
  password          String
  otp               String?
  isVerified        Boolean   @default(false)
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  role              user_role @default(USER)
}

enum user_role {
  ADMIN
  CREATOR
  USER
}
