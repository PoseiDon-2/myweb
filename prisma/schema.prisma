generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  fname             String
  lname             String
  email             String    @unique
  password          String
  otp               String?
  isVerified        Boolean   @default(false)
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  creator           Creator?  @relation("UserToCreator") // ความสัมพันธ์กับ Creator
}

model Creator {
  id              String            @id @default(uuid())
  userId          Int               @unique // เชื่อมโยงกับ User
  firstName       String
  lastName        String
  email           String   @unique(map: "Creator_email_key")
  phone           String
  schoolName      String
  schoolDistrict  String
  position        String
  schoolAddress   String   @db.Text
  licenseFileUrl  String?
  positionFileUrl String?
  isVerified      Boolean           @default(false)
  termsAccepted   Boolean           @default(false)
  privacyAccepted Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  requests        DonationRequest[] // ความสัมพันธ์กับ DonationRequest
  trackings       Tracking[]        // ความสัมพันธ์กับ Tracking
  user            User              @relation("UserToCreator", fields: [userId], references: [id])
}

model donationrequest {
  id            String    @id
  schoolName    String
  projectTitle  String
  description   String
  category      String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  image         String?
  contactName   String
  contactPhone  String
  contactEmail  String
  walletAddress String
  creatorId     String
  createdAt     DateTime  @default(now())

  @@index([creatorId], map: "DonationRequest_creatorId_fkey")
}

model outcome {
  id                String @id
  donationRequestId String
  title             String
  description       String

  @@index([donationRequestId], map: "Outcome_donationRequestId_fkey")
}

model Tracking {
  id         String    @id @default(uuid())
  type       String // "donation" หรือ "creator"
  donationId String? // อ้างอิง Donation (nullable)
  creatorId  String? // อ้างอิง Creator (nullable)
  status     String // "pending", "completed", "rejected"
  details    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  donation   Donation? @relation(fields: [donationId], references: [id])
  creator    Creator?  @relation(fields: [creatorId], references: [id])
}

model Story {
  id        String   @id @default(uuid())
  title     String
  thumbnail String
  media     String
  type      String // "image" หรือ "video"
  videoUrl  String?
  caption   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model update {
  id                String   @id
  donationRequestId String
  title             String
  date              DateTime
  description       String

  @@index([donationRequestId], map: "Update_donationRequestId_fkey")
}

model Outcome {
  id              String          @id @default(uuid())
  donationRequestId String
  title           String
  description     String
  donationRequest DonationRequest @relation(fields: [donationRequestId], references: [id])
}

model Update {
  id              String          @id @default(uuid())
  donationRequestId String
  title           String
  date            DateTime
  description     String
  donationRequest DonationRequest @relation(fields: [donationRequestId], references: [id])
}